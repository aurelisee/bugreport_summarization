While looking for the cause of bug 196847, it is confusing about a usage of the so called fuzz factor, so it is necessary to take a good look at the patcher algorithm. It would be great if the patching could implement the algorithm described in bug 196847, comment 6. Create an attachment (id=79484) patch #1, there are some limitations in the fuzz factor mechanism:1) the default maximum fuzz factor is 2 (which is a consequence of the fact that there are usually 3 lines of context " around " a hunk); 2) at this moment i also decided to not match context lines inside inside dopatch[2] method as they are already checked in the trypatch[3] method in the same class. In the hunkresult#calculatefuzz, it seems to scan the whole file looking for possible matches and we should prevent the patcher from allowing such cases. The maximum fuzz seems to be hardcoded at 2 with the assumption that there are 3 lines of context,i would allow ignoring all context lines, but that ' s just my opinioni know that default values are 3 for context lines and 2 for maximum fuzz factor, but we could inform a user that he/she exceed the maximum. In hunk#trypatch, apply the fuzz factor to any context lines, not only to the ones at the end or at the beginning of a hunk, and provide a discussion with szymon about that and we decided to keep the context lines in the middle as they are - they must match. We don't need to know how many context lines to skip in order to place the addition properly, i do collect context lines before processing an addition/change/deletion, and i need to recognize which context lines are preceding a hunk and which follows it. We need to be careful about ignoring all content lines since it depends on the natrue of the change, and hence it would be good to have a set of tests that cover some of these corner cases to ensure that the algorithm behaves as the user would expect.
