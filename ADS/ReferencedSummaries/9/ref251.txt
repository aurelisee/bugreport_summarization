It was encountered during the inspection of one bug that the fuzz factor is not used correctly. It is illustrated that in hunkresult#calculatefuzz[1] and hunk#trypatch[2] fuzz factor is wrongly used. It is suggested to take a second look at the logic and usage of fuzz factor with thorough testing to confirm the expected behaviour coz other testers found code quite confusing. A test case is uploaded to show that the logic is not working correctly: it is assumed in the patch that the fuzz factor works fine but actually its not true. A testPatchdataSubfolder is mainly for testing the case and everyone should make 3 files: context, patch and result. This is a working version of the patch for the fuzz factor issue and I'd be happy to hear your opinion. There are some limitations in the fuzz factor mechanism which are decided to be introduced: 1) The default maximum fuzz factor is 2 (which is a consequence of the fact that there are usually 3 lines of context "around" a hunk). As stated in the previous comment, I'm aware that there can be still some cases which when discovered will need addressing in a next version of the patch. The patched is looked at but it is a hard to verify the code via inspection. It is implied that it would be possible to get hunks matching out of order like The maximum fuzz seems to be hardcoded at 2 with the assumption that there are 3 lines of context. It couldn't be figure out what is being done in algorithm and it is suggested to discuss with Szymon as he has much more knowledge of algorithm to move faster with this issue. Isn't it good to keep track of additional context lines. It is further discussed that what should inform user about the fuzz fator value for a hunk. In some cases it is necessary to make a reordering of hunks thus a further test is requested and also it is decided to use the hardcoded values for fuzz factor.