KDevelop already allows to 'grep foo(' in the context menu of the class treeview.
While this feature doesn't work for me at all it would not do a good job since:
version 2.1.3. Sorry if the feature is in a newer version of KDevelop (3.0) but nothing in the changelog suggests that.
You are strongly advised to update to the latest CVS version of KDevelop3, code name gideon, take a look at:
The specific feature I was looking for is still not present, although the grep works, as long as it is looking for pointers as foo->doit(); foo.doit() is not found.
I guess the feature you are talking about is like a 'Find Usage' feature as it works in IntelliJ IDEA (Java IDE), so, this is good.
- The user presses Alt+Shift+F7 (e.g.)
- Gideon hightligh the usage of currenlty selected funciton/variable (or one which is under the cursor and not selected)
- User got the response, make his/her mind clear about the usage
- User press Esc and hightligh turned off.
It would also be nice if this feature was clever enough to understand C++ scoping rules, e.g. a call within foo::bar() to boo() could be a call to foo::boo() or boo() or a function within a namespace previously specified with \"using namespace\".
Just to get all these voters a bit excited: A basic experimental use-highlighter has been implemented in KDevelop4 the last days.
AFAIK it currently highlights only usages of variables, but extending that shouldn't be much of a problem.
Version:            (using KDE KDE 3.1KDE 1.2)
1. It finds calls of the same function name belonging to a different class
2. It doesn't find calls of functions if there are whitespaces between the function name and the left bracket such as foo->bar ();
3. It doesn't distinguish between overloaded functions
