Here is the JavaDoc for IAdapterManager.computeClassOrder(Class):
Returns the class search order for a given class.
This conflicts with the JavaDoc. The class X is the first thing returned, but it is *not* followed by \"X's superclasses in order to Object\".
It is followed by a breadth-first list of X's interface hierarchy\", *then* followed by X's superclass Y, which is then followed by a breadth-first list of Y's interface hierarchy; and so on, up to  java.lang.Object.
Also, the JavaDoc has what reads to me as a contradiction:
a breadth-first traversal of the target class's interfaces in the order returned by getInterfaces
in the example, A and its superinterfaces then B and its superinterfaces
What actually happens *does* feel like a \"breadth-first\" search;
but that would not be accurately described as \"A and its superinterfaces then B and its superinterfaces\".
The implementation doesn't match the spec, and there is a contradiction in the spec itself.
It looks like this change was made inadvertently during a large batch of changes to add support for the adapters extension point (bug 32498).
I think since this change was introduced accidentally, and this is a clear violation of a long-standing specification, I'm leaning towards fixing the implementation.
Thus this clarifies how the interfaces of superclasses are considered, while fixing the contradiction in the specification of interface search order.
Fix v01
This is a test case using your richer example
It might be more accurate to say:
Since X and Y are not actually included in the \"traversal\".
Good point, I have released this clarification to HEAD.
