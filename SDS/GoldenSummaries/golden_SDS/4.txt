The method FolderDescription#createExistentResourceFromHandle(IResource,IProgressMonitor) checks if the folder already exists and returns immediately if so.
In cases where the FolderDescription has members which are not existing at that moment, that members will not be created.
Assume you want to create a folder and a file in that folder and use two operations for this.
I know it is not necessary to use two operations but my configuration is more complex than this example code.
IFolder folder = ... // must not exist
CreateFolderOperation op1 = new CreateFolderOperation(folder,...);
IFile file = folder.getFile(...); // must not exist
CreateFileOperation op1 = new CreateFileOperation(file,...);
op1.execute(...);
op2.execute(...);
The execution of the op2 does not create the file because as stated above createExistentResourceFromHandle returns immediately because the parent folder of the file was created by op1.
The basic problem is that the workspace file structure has changed since you first created the operation, so the change described by the operation is no longer valid.
I think what needs to happen is that the javadoc better describes the lifecycle of these operations, and the isValid() method is tightened up so that the operation becomes invalid when the workspace changes to no longer match its recorded state.
It is not the intention of these classes to stay in synch with workspace changes that happen independently of a shared, sequential workspace history.
In order to understand better what the ramifications might be of actually fixing this bug vs. better documenting the limitations and usage, I started by implementing a trial fix for the problem as reported.
It is pretty straightforward to rearrange the code to create the child resources (the file) even if the parent exists since the operation was created.
However, the problems occur later when you try to undo such an operation.
Since the operation \"remembered\" that the folder didn't exist when it was first created, the undo of the create file operation tries to also delete the folder.
This means that to truly fix the bug, we'd have to change the operations so that the resource descriptions were constantly updated to deal with changes that occurred.
So I still believe it's better to document more clearly what the intentions of the API are.
I've updated the javadoc for AbstractResourcesOperation, CreateFileOperation, and CreateFolderOperation.
I created a stricter validity check on CreateFileOperation so that the operation will return an invalid status if portions of the resource tree *that did not exist when the operation was created* already exist at the time of execution.
