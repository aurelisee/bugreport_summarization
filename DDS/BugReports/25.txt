Does this issue occur when all extensions are disabled?: Yes

VS Code Version: 1.84.2
OS Version: Windows 11 x64 (22H2, 22621.2715)


Hello, I am the original author of the issue #178460 (Use only unique commit messages for auto-complete) and so far the implemented solution worked quite well but what I noticed is that commit message(s) disappear after undoing the last commit (not sure if the new solution brought this issue).

Steps to Reproduce:

Open a local project that's a Git repository
Make some changes
IMPORTANT: make sure to have multiple commit messages available as auto-complete
Cycle through the commit messages, pick one (but a wrong one, accidents do happen! üòâ)
Commit with that message
Since the message is wrong - click on the Source dot menu
Click on Commit > Undo Last Commit
Pick the correct commit message
Commit with the correct message and see the commit message from step 4 disappearing (for good...)
In my case the commit message "‚ùå [optimization]: remove rule" completely disappears.
I have attached a video below since it might make things clearer. üòâ
@joaomoreno, this seems to be related to the commit message history.
@lszomoru where is this stored?
Hi @lszomoru , it would be great if I could work on this as my first open source contribution.

I have done some initial analysis and looks like this is where the issue is
https://github.com/microsoft/vscode/blob/main/src/vs/workbench/contrib/scm/common/scmService.ts#L146

Calling saveValue replaces the value of the last item in the linked list.
Instead of this, historyNavigator.add would be better because it wouldnt replace the last existing item.

Hey @danik292 , I was going through the code and looks like the linked list is stored in-memory.
I just went through the contribution guide again, and looks like there's no need to particularly get the issue assigned to me before raising the PR.
I'll get the PR raised.
Thanks!
Fixes #198975.

Problem
Consider how scmService.setValue works

It doesnt make any changes when the passed value is same as the value already set, and just returns
In case the method is invoked with transient = false, it first replaces the last value of the history navigator with its current _value, it then adds the passed value to the history naviagator
At the end, it just updates _value member with the passed-value
Note: historyNavigator balances itself by always removing duplicates
Following is a typical user flow and what happens under the hood
Please consider the following two data structures which are used-
HistoryNavigator = [Msg1, Msg2, Msg3, Msg4, Msg5, ]
scmService._value = "<empty string"

1) User enters the commit message 

- setValue gets called with transient = true
- HistoryNavigator => no changes [Msg1, Msg2, Msg3, Msg4, Msg5, ""]
- scmService._value = "New Msg"
     
2) User clicks on commit button
- setValue gets called with transient = false, passed value is an empty string
- HistoryNavigator (last value replaced with _value="NewMsg" and passed-value="empty string" added at the end)
[Msg1, Msg2, Msg3, Msg4, Msg5, ""] => [Msg1, Msg2, Msg3, Msg4, Msg5, NewMsg, ""]
- scmService._value = ""
Notice how the end of history naviagtor is always an empty string
Considering the case of undo commit, a major difference is that this is the only time when setValue is called with transient = false and the passed-value is an actual message (and not an empty string).
So, with undo commit, the undone-commit-message is passed as a value. 
This in-turn causes the undone-commit message to sit at the end of the history navigator and also in the _value member.

If anytime after this a setValue is called with transient = false, this would cause the last item in history navigator (which is the undone-commit-message) to be overwritten and hence lost.

Here is an example showing the same.
Lets assume the history looks like this [Msg1, Msg2, Msg3, Msg4, Msg5, ]

1) User goes in the history to Msg3
- setValue gets called with transient = true
- HistoryNavigator => no changes [Msg1, Msg2, Msg3, Msg4, Msg5, ""]
- scmService._value = "Msg3"

2) User clicks on commit button
- setValue gets called with transient = false, passed value is an empty string
- HistoryNavigator (last value replaced with _value="Msg3" and passed-value="empty string" added at the end)
[Msg1, Msg2, Msg3, Msg4, Msg5, ""] => [Msg1, Msg2, Msg4, Msg5, Msg3, ""]
- scmService._value = ""

3) User does Undo Commit
- setValue gets called with transient = false, passed value is the undone-commit-message
- HistoryNavigator (last value replaced with _value="" and passed-value="Msg3" added at the end)
[Msg1, Msg2, Msg4, Msg5, Msg3, ""] => [Msg1, Msg2, Msg4, Msg5, "", Msg3]
- scmService._value = "Msg3"

** Notice how Msg3 is now at the end of the queue and would get replaced the next time setValue is called with transient = false. 
This would happen the next time a message is committed for eg.

4) User goes to Msg5 in the history 
- setValue gets called with transient = true
- HistoryNavigator => no changes [Msg1, Msg2, Msg4, Msg5, "", Msg3]
- scmService._value = "Msg5"

5) User commits
- setValue gets called with transient = false, passed value is an empty string
- HistoryNavigator (last value replaced with _value="" and passed-value="" added at the end)
[Msg1, Msg2, Msg4, Msg5, "", Msg3] => [Msg1, Msg2, Msg4, Msg5, ""]
- scmService._value = ""

Msg3 is lost
Fix
The fix for this would be to modify the implementation of setValue when transient = false. 
Instead of replacing the last value in historyNavigator with the passed-in value we just need to add the passed-in value as another node. 
This would handle all the cases.
Testing
Tested these manually-
Adding a new commit message and committing. 
This works perfectly fine.
Moving in the history, committing, undoing last commit, and then commiting again doest remove the undone-commit form the history.
Unit Tests
9175 passing (2m)
60 pending

